// Generated by CoffeeScript 1.3.3

/*
http://api.mail.ru/docs/guides/social-apps/

@param params
@param callback
*/


(function() {
  var MmSocialApi;

  MmSocialApi = function(params, callback) {
    var apiUrl, instance, moduleExport, wrap, wrap_api;
    instance = this;
    apiUrl = "http://cdn.connect.mail.ru/js/loader.js";
    wrap_api = function(fn) {
      return mailru.loader.require("api", fn);
    };
    wrap = function() {
      return window[params.wrapperName];
    };
    moduleExport = {
      raw: null,
      unifyFields: {
        id: "uid",
        first_name: "first_name",
        last_name: "last_name",
        birthdate: "birthday",
        nickname: "nick",
        photo: "pic",
        gender: function() {
          var value;
          value = (arguments_.length ? arguments_[0] : false);
          if (value === false) {
            return "sex";
          }
          if (value === 0) {
            return "male";
          } else {
            return "female";
          }
        }
      },
      getProfiles: function(uids, callback, errback) {
        if (!(uids instanceof Array)) {
          uids = (uids + "").split(",");
        }
        return wrap_api(function() {
          return mailru.common.users.getInfo((function(data) {
            if (data.error) {
              return (errback ? errback(data.error) : callback({}));
            }
            return callback(wrap().unifyProfileFields(data));
          }), uids.join(","));
        });
      },
      getFriends: function(callback, errback) {
        return wrap_api(function() {
          return mailru.common.friends.getExtended(function(data) {
            if (data.error) {
              return (errback ? errback(data.error) : callback([]));
            }
            if (data.response === null) {
              data.response = [];
            }
            return callback(wrap().unifyProfileFields(data));
          });
        });
      },
      getCurrentUser: function(callback, errback) {
        return moduleExport.getProfiles(mailru.session.vid, (function(data) {
          return callback(data[0]);
        }), errback);
      },
      getAppFriends: function(callback, errback) {
        return wrap_api(function() {
          return mailru.common.friends.getAppUsers((function(data) {
            if (data.error) {
              return (errback ? errback(data.error) : callback([]));
            }
            if (data === null) {
              data = [];
            }
            return callback(wrap().unifyProfileFields(data));
          }), {
            ext: true
          });
        });
      },
      inviteFriends: function() {
        var local_callback, local_params;
        local_params = arguments_[0] || null;
        local_callback = arguments_[1] || null;
        if (typeof local_params === "function") {
          local_callback = local_params;
        }
        return wrap_api(function() {
          var eventINVId;
          eventINVId = mailru.events.listen(mailru.app.events.friendsInvitation, function(event) {
            if (event.status !== "opened") {
              mailru.events.remove(eventINVId);
              if (local_callback) {
                return local_callback(event.data);
              } else {
                return null;
              }
            }
          });
          return mailru.app.friends.invite();
        });
      },
      resizeCanvas: function(params, callback) {
        mailru.app.utils.setHeight(params.height);
        if (callback) {
          return callback();
        } else {
          return null;
        }
      },
      postWall: function(params, callback, errback) {
        params = jQuery.extend({
          id: mailru.session.vid
        }, params);
        return wrap_api(function() {
          var event, eventId, method, post_params;
          event = mailru.common.events.guestbookPublish;
          method = mailru.common.guestbook;
          post_params = {
            text: params.message,
            uid: params.id
          };
          if (params.id === mailru.session.vid) {
            event = mailru.common.events.streamPublish;
            method = mailru.common.stream;
            post_params = {
              text: params.message
            };
          }
          eventId = mailru.events.listen(event, function(event) {
            if (event.status === "publishSuccess") {
              return callback();
            }
            if (event.status === "closed") {
              mailru.events.remove(eventId);
              if (errback) {
                return errback(event);
              } else {
                return callback(event);
              }
            }
          });
          return method.post(post_params, function(data) {
            if (data.error) {
              if (errback) {
                return errback(data);
              } else {
                return callback(data);
              }
            }
          });
        });
      },
      makePayment: function(params, callback, errback, closeDialogback) {
        return wrap_api(function() {
          var eventDialogId, eventPaymentId;
          eventDialogId = mailru.events.listen(mailru.app.events.paymentDialogStatus, function(event) {
            if (event.status === "closed") {
              mailru.events.remove(eventDialogId);
              if (closeDialogback) {
                return closeDialogback(event);
              } else {
                return callback(event);
              }
            }
          });
          eventPaymentId = mailru.events.listen(mailru.app.events.incomingPayment, function(event) {
            mailru.events.remove(eventPaymentId);
            if (event.status === "failed") {
              return (errback ? errback() : callback(event));
            }
            return callback(event);
          });
          return mailru.app.payments.showDialog(params);
        });
      }
    };
    return jQuery.getScript(apiUrl, function() {
      return wrap_api(function() {
        mailru.app.init(params.mm_key);
        moduleExport.raw = mailru;
        instance.moduleExport = moduleExport;
        if (callback) {
          return callback();
        } else {
          return null;
        }
      });
    });
  };

}).call(this);
