// Generated by CoffeeScript 1.3.3

/*
http://vk.com/developers.php

@param params
@param callback
*/


(function() {
  var Vk,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Vk = (function(_super) {
    var apiUrl, instance, moduleExport, params, wrap;

    __extends(Vk, _super);

    function Vk(params, callback) {
      this.params = params;
      this.callback = callback;
      return;
    }

    instance = Vk;

    apiUrl = "http://vk.com/js/api/xd_connection.js?2";

    params = jQuery.extend({
      width: 827
    }, params);

    wrap = function() {
      return window[params.wrapperName];
    };

    moduleExport = {
      raw: null,
      unifyFields: {
        id: "uid",
        first_name: "first_name",
        last_name: "last_name",
        birthdate: "bdate",
        nickname: "nickname",
        photo: "photo",
        gender: function() {
          var value;
          value = (arguments_.length ? arguments_[0] : false);
          if (!value) {
            return "sex";
          }
          if (value === 2) {
            return "male";
          } else {
            return "female";
          }
        }
      },
      getProfiles: function(uids, name_case, callback, errback) {
        if (!(uids instanceof Array)) {
          uids = (uids + "").split(",");
        }
        if (typeof name_case === "function") {
          callback = arguments_[1];
          errback = arguments_[2];
        }
        return VK.api("getProfiles", {
          uids: uids.join(","),
          fields: wrap().getApiFields(params.fields),
          name_case: name_case
        }, function(data) {
          if (data.error) {
            return (errback ? errback(data.error) : callback({}));
          }
          return callback(wrap().unifyProfileFields(data.response));
        });
      },
      getFriends: function(callback, errback) {
        return VK.api("friends.get", {
          uid: VK.params.viewer_id,
          fields: wrap().getApiFields(params.fields)
        }, function(data) {
          if (data.error) {
            return (errback ? errback(data.error) : callback([]));
          }
          if (data.response === null) {
            data.response = [];
          }
          return callback(wrap().unifyProfileFields(data.response));
        });
      },
      getCurrentUser: function(callback, errback) {
        VK.loadParams(document.location.href);
        return moduleExport.getProfiles(VK.params.viewer_id, (function(data) {
          return callback(data[0]);
        }), errback);
      },
      getAppFriends: function(callback, errback) {
        return VK.api("execute", {
          code: "API.getAppFriends();"
        }, function(data) {
          if (data.error) {
            if (errback) {
              errback(data.error);
            } else {
              callback({});
            }
          }
          if (data.response === null) {
            data.response = [];
          }
          return callback(data.response);
        });
      },
      inviteFriends: function() {
        var callback;
        params = arguments_[0] || null;
        callback = arguments_[1] || null;
        if (typeof params === "function") {
          callback = params;
        }
        VK.addCallback("onWindowFocus", function() {
          VK.removeCallback("onWindowFocus");
          if (callback) {
            return callback();
          } else {
            return null;
          }
        });
        return VK.callMethod("showInviteBox");
      },
      resizeCanvas: function(params, callback) {
        VK.callMethod("resizeWindow", params.width, params.height);
        if (callback) {
          return callback();
        } else {
          return null;
        }
      },
      postWall: function(params, callback, errback) {
        params = jQuery.extend({
          id: VK.params.viewer_id
        }, params);
        return VK.api("wall.post", {
          owner_id: params.id,
          message: params.message
        }, function(data) {
          if (data.error) {
            return (errback ? errback(data.error) : callback(data.error));
          }
          return callback(data.response);
        });
      },
      makePayment: function(params, callback, errback, closeDialogback) {
        var balanceChanged;
        balanceChanged = false;
        VK.addCallback("onWindowFocus", function() {
          VK.removeCallback("onWindowFocus");
          if (!balanceChanged) {
            if (closeDialogback) {
              return closeDialogback();
            } else {
              return callback();
            }
          }
        });
        VK.addCallback("onBalanceChanged", function() {
          VK.removeCallback("onBalanceChanged");
          balanceChanged = true;
          return callback();
        });
        return VK.callMethod("showPaymentBox", params.votes);
      }
    };

    jQuery.getScript(apiUrl, function() {
      return VK.init(function() {
        VK.loadParams(document.location.href);
        moduleExport.raw = VK;
        instance.moduleExport = moduleExport;
        if (callback) {
          return callback();
        } else {
          return null;
        }
      });
    });

    return Vk;

  })(Module);

}).call(this);
