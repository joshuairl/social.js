// Generated by CoffeeScript 1.3.3

/*
http://dev.odnoklassniki.ru/wiki/display/ok/Odnoklassniki+JavaScript+API

@param params
@param callback
*/


(function() {
  var Ok,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Ok = (function(_super) {
    var apiUrl, callRaw, instance, moduleExport, params, wrap;

    __extends(Ok, _super);

    function Ok(params, callback) {
      this.params = params;
      this.callback = callback;
      return;
    }

    instance = Ok;

    params = jQuery.extend({
      ok_sanbox: false,
      width: 760
    }, params);

    wrap = function() {
      return window[params.wrapperName];
    };

    apiUrl = "http://api.odnoklassniki.ru/js/fapi.js";

    if (params.ok_sanbox) {
      apiUrl = "http://api-sandbox.odnoklassniki.ru:8088/js/fapi.js";
    }

    callRaw = function(method, params, callback) {
      params = jQuery.extend({
        method: method
      }, params);
      return FAPI.Client.call(params, callback);
    };

    moduleExport = {
      raw: null,
      unifyFields: {
        id: "uid",
        first_name: "first_name",
        last_name: "last_name",
        birthdate: "birthday",
        nickname: "name",
        photo: "pic_1",
        gender: function() {
          var value;
          value = (arguments_.length ? arguments_[0] : false);
          if (value === false) {
            return "gender";
          }
          if (value === "male") {
            return "male";
          } else {
            return "female";
          }
        }
      },
      getProfiles: function(uids, callback, errback) {
        if (!(uids instanceof Array)) {
          uids = (uids + "").split(",");
        }
        return callRaw("users.getInfo", {
          fields: wrap().getApiFields(params.fields),
          uids: uids.join(",")
        }, function(status, data, error) {
          if (status === "ok") {
            return callback(wrap().unifyProfileFields(data));
          } else {
            if (errback) {
              return errback(error);
            } else {
              return callback(error);
            }
          }
        });
      },
      getFriends: function(callback, errback) {
        return callRaw("friends.get", {}, function(status, data, error) {
          if (status === "ok") {
            return moduleExport.getProfiles(data.join(","), callback, errback);
          } else {
            if (errback) {
              return errback(error);
            } else {
              return callback(error);
            }
          }
        });
      },
      getCurrentUser: function(callback, errback) {
        return moduleExport.getProfiles(Object(FAPI.Util.getRequestParameters()).logged_user_id, (function(data) {
          return callback(data[0]);
        }), errback);
      },
      getAppFriends: function(callback, errback) {
        return callRaw("friends.getAppUsers", {}, function(status, data, error) {
          if (status === "ok") {
            return moduleExport.getProfiles(data.uids.join(","), callback, errback);
          } else {
            if (errback) {
              return errback(error);
            } else {
              return callback(error);
            }
          }
        });
      },
      inviteFriends: function() {
        var local_callback, local_params;
        local_params = arguments_[0] || null;
        local_callback = arguments_[1] || null;
        if (typeof local_params === "function") {
          local_callback = local_params;
        }
        FAPI.UI.showInvite(local_params.install_message);
        if (local_callback) {
          return local_callback();
        } else {
          return null;
        }
      },
      resizeCanvas: function(params, callback) {
        FAPI.UI.setWindowSize(params.width, params.height);
        if (callback) {
          return callback();
        } else {
          return null;
        }
      },
      postWall: function(params, callback, errback) {
        var publishMessage;
        params = jQuery.extend({
          id: FAPI.Client.uid
        }, params);
        window.API_callback = function(method, status, attributes) {
          delete window.API_callback;
          if (status !== "ok") {
            return (errback ? errback(attributes) : callback(attributes));
          }
          if (method === "showConfirmation" && status === "ok") {
            publishMessage.resig = attributes;
            return callRaw("stream.publish", publishMessage, function(data) {
              return callback(data);
            });
          }
        };
        publishMessage = {
          message: params.message,
          method: "stream.publish",
          application_key: FAPI.Client.applicationKey,
          session_key: FAPI.Client.sessionKey,
          format: FAPI.Client.format
        };
        publishMessage.sig = FAPI.Util.calcSignature(publishMessage, FAPI.Client.sessionSecretKey);
        return FAPI.UI.showConfirmation("stream.publish", params.message, publishMessage.sig);
      },
      makePayment: function(params, callback, errback, closeDialogback) {
        window.API_callback = function(method, result, data) {
          delete window.API_callback;
          data = jQuery.parseJSON(data);
          data.result = result;
          return callback(data);
        };
        return FAPI.UI.showPayment(params.name, params.description, null, null, JSON.stringify(params.items), [], "ok", true);
      }
    };

    jQuery.getScript(apiUrl, function() {
      var FAPI_Params;
      FAPI_Params = Object(FAPI.Util.getRequestParameters());
      return FAPI.init(FAPI_Params.api_server, FAPI_Params.apiconnection, function() {
        moduleExport.raw = FAPI;
        instance.moduleExport = moduleExport;
        if (callback) {
          return callback();
        } else {
          return null;
        }
      });
    });

    return Ok;

  })(Module);

}).call(this);
